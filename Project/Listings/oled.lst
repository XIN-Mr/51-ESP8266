C51 COMPILER V9.60.0.0   OLED                                                              01/31/2020 22:44:08 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: D:\MDK\C51\BIN\C51.EXE ..\APP\oled\oled.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\APP\DHT11;..\APP\oled;
                    -..\APP\Usart;..\APP\ESP8266;..\User;..\APP\time) DEBUG OBJECTEXTEND PRINT(.\Listings\oled.lst) TABS(2) OBJECT(.\Objects\
                    -oled.obj)

line level    source

   1          #include "oled.h"
   2          #include "oledfont.h"    
   3          
   4          /**********************************************
   5          //IIC Start
   6          **********************************************/
   7          void IIC_Start()
   8          {
   9   1        OLED_SCLK_Set();
  10   1        OLED_SDIN_Set();
  11   1        OLED_SDIN_Clr();
  12   1        OLED_SCLK_Clr();
  13   1      }
  14          
  15          /**********************************************
  16          //IIC Stop
  17          **********************************************/
  18          void IIC_Stop()
  19          {
  20   1        OLED_SCLK_Set();
  21   1      //  OLED_SCLK_Clr();
  22   1        OLED_SDIN_Clr();
  23   1        OLED_SDIN_Set();
  24   1        
  25   1      }
  26          
  27          void IIC_Wait_Ack()
  28          {
  29   1        //GPIOB->CRH &= 0XFFF0FFFF; //设置PB12为上拉输入模式
  30   1        //GPIOB->CRH |= 0x00080000;
  31   1      //  OLED_SDA = 1;
  32   1      //  delay_us(1);
  33   1        //OLED_SCL = 1;
  34   1        //delay_us(50000);
  35   1      /*  while(1)
  36   1        {
  37   1          if(!OLED_SDA)       //判断是否接收到OLED 应答信号
  38   1          {
  39   1            //GPIOB->CRH &= 0XFFF0FFFF; //设置PB12为通用推免输出模式
  40   1            //GPIOB->CRH |= 0x00030000;
  41   1            return;
  42   1          }
  43   1        }
  44   1      */
  45   1        OLED_SCLK_Set() ;
  46   1        OLED_SCLK_Clr();
  47   1      }
  48          /**********************************************
  49          // IIC Write byte
  50          **********************************************/
  51          
  52          void Write_IIC_Byte(unsigned char IIC_Byte)
  53          {
C51 COMPILER V9.60.0.0   OLED                                                              01/31/2020 22:44:08 PAGE 2   

  54   1        unsigned char i;
  55   1        unsigned char m,da;
  56   1        da=IIC_Byte;
  57   1        OLED_SCLK_Clr();
  58   1        for(i=0;i<8;i++)    
  59   1        {
  60   2          m=da;
  61   2          //  OLED_SCLK_Clr();
  62   2          m=m&0x80;
  63   2          if(m==0x80)
  64   2          {OLED_SDIN_Set();}
  65   2          else OLED_SDIN_Clr();
  66   2            da=da<<1;
  67   2          OLED_SCLK_Set();
  68   2          OLED_SCLK_Clr();
  69   2          }
  70   1      
  71   1      
  72   1      }
  73          /**********************************************
  74          // IIC Write Command
  75          **********************************************/
  76          void Write_IIC_Command(unsigned char IIC_Command)
  77          {
  78   1         IIC_Start();
  79   1         Write_IIC_Byte(0x78);            //Slave address,SA0=0
  80   1        IIC_Wait_Ack(); 
  81   1         Write_IIC_Byte(0x00);      //write command
  82   1        IIC_Wait_Ack(); 
  83   1         Write_IIC_Byte(IIC_Command); 
  84   1        IIC_Wait_Ack(); 
  85   1         IIC_Stop();
  86   1      }
  87          /**********************************************
  88          // IIC Write Data
  89          **********************************************/
  90          void Write_IIC_Data(unsigned char IIC_Data)
  91          {
  92   1         IIC_Start();
  93   1         Write_IIC_Byte(0x78);      //D/C#=0; R/W#=0
  94   1        IIC_Wait_Ack(); 
  95   1         Write_IIC_Byte(0x40);      //write data
  96   1        IIC_Wait_Ack(); 
  97   1         Write_IIC_Byte(IIC_Data);
  98   1        IIC_Wait_Ack(); 
  99   1         IIC_Stop();
 100   1      }
 101          void OLED_WR_Byte(unsigned dat,unsigned cmd)
 102          {
 103   1        if(cmd)
 104   1            {
 105   2      
 106   2         Write_IIC_Data(dat);
 107   2         
 108   2          }
 109   1        else {
 110   2         Write_IIC_Command(dat);
 111   2          
 112   2        }
 113   1      
 114   1      
 115   1      }
C51 COMPILER V9.60.0.0   OLED                                                              01/31/2020 22:44:08 PAGE 3   

 116          
 117          
 118          //坐标设置
 119          
 120          void OLED_Set_Pos(unsigned char x, unsigned char y) 
 121          {   
 122   1        OLED_WR_Byte(0xb0+y, OLED_CMD);
 123   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10, OLED_CMD);
 124   1        OLED_WR_Byte((x&0x0f), OLED_CMD); 
 125   1      }   
 126              
 127          //开启OLED显示    
 128          void OLED_Display_On(void)
 129          {
 130   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 131   1        OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 132   1        OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 133   1      }
 134          //关闭OLED显示     
 135          void OLED_Display_Off(void)
 136          {
 137   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 138   1        OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 139   1        OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 140   1      }            
 141          //清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!    
 142          void OLED_Clear(void)  
 143          {  
 144   1        u8 i,n;       
 145   1        for(i=0;i<8;i++)  
 146   1        {  
 147   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 148   2          OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置―列低地址
 149   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 150   2          for(n=0;n<128;n++)
 151   2            OLED_WR_Byte(0,OLED_DATA); 
 152   2        } //更新显示
 153   1      }
 154          void OLED_On(void)  
 155          {  
 156   1        u8 i,n;       
 157   1        for(i=0;i<8;i++)  
 158   1        {  
 159   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 160   2          OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置―列低地址
 161   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 162   2          for(n=0;n<128;n++)
 163   2            OLED_WR_Byte(0x00, OLED_DATA); 
 164   2        } //更新显示
 165   1      }
 166          //在指定位置显示一个字符,包括部分字符
 167          //x:0~127
 168          //y:0~63
 169          //mode:0,反白显示;1,正常显示         
 170          //size:选择字体 16/12 
 171          void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 Char_Size)
 172          {       
 173   1        unsigned char c = 0, i = 0;
 174   1          
 175   1        c = chr - ' ';    //得到偏移后的值      
 176   1        if (x > Max_Column-1)
 177   1        {
C51 COMPILER V9.60.0.0   OLED                                                              01/31/2020 22:44:08 PAGE 4   

 178   2          x = 0;
 179   2          y = y + 2;
 180   2        }
 181   1        if (Char_Size == 16)
 182   1        {
 183   2          OLED_Set_Pos(x, y); 
 184   2          for(i=0; i<8; i++)
 185   2            OLED_WR_Byte(F8X16[c*16+i], OLED_DATA);
 186   2          OLED_Set_Pos(x, y + 1);
 187   2          for(i=0; i<8; i++)
 188   2            OLED_WR_Byte(F8X16[c*16+i+8], OLED_DATA);
 189   2        }
 190   1        else 
 191   1        { 
 192   2          OLED_Set_Pos(x, y);
 193   2          for(i=0; i<6; i++)
 194   2            OLED_WR_Byte(F6x8[c][i], OLED_DATA);  
 195   2        }
 196   1      }
 197                    
 198          
 199          //显示一个字符号串
 200          void OLED_ShowString(u8 x,u8 y,u8 *chr,u8 Char_Size)
 201          {
 202   1        unsigned char j=0;
 203   1        while (chr[j]!='\0')
 204   1        {   OLED_ShowChar(x,y,chr[j],Char_Size);
 205   2            x+=8;
 206   2          if(x>120){x=0;y+=2;}
 207   2            j++;
 208   2        }
 209   1      }
 210          //显示汉字
 211          void OLED_ShowCHinese(u8 x, u8 y, u8 no)
 212          {               
 213   1        u8 t, adder = 0;
 214   1      
 215   1        OLED_Set_Pos(x, y); 
 216   1          for(t=0;t<16;t++)
 217   1        {
 218   2          OLED_WR_Byte(Hzk[no][t], OLED_DATA);
 219   2          adder += 1;
 220   2        } 
 221   1      
 222   1        OLED_Set_Pos(x, y+1); 
 223   1          for(t=0; t<16; t++)
 224   1        { 
 225   2          OLED_WR_Byte(Hzk[no][t+16], OLED_DATA);
 226   2          adder += 1;
 227   2        }         
 228   1      }
 229          /***********功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7****************
             -*/
 230          void OLED_DrawBMP(u8 x0, u8 y0, u8 x1, u8 y1, u8 BMP[])
 231          {   
 232   1        unsigned int j = 0;
 233   1        unsigned char x, y;
 234   1        
 235   1        for (y=y0; y<y1; y++)
 236   1        {
 237   2          OLED_Set_Pos(x0, y);
 238   2            for (x=x0; x<x1; x++)
C51 COMPILER V9.60.0.0   OLED                                                              01/31/2020 22:44:08 PAGE 5   

 239   2            {      
 240   3              OLED_WR_Byte(BMP[j++], OLED_DATA);        
 241   3            }
 242   2        }
 243   1      } 
 244          
 245          //初始化SSD1306             
 246          void OLED_Init(void)
 247          {   
 248   1        OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 249   1        OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 250   1        OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 251   1        OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 252   1        OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 253   1        OLED_WR_Byte(0x81,OLED_CMD); // contract control
 254   1        OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 255   1        OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 256   1        OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 257   1        OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 258   1        OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 259   1        OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 260   1        OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 261   1        OLED_WR_Byte(0x00,OLED_CMD);//
 262   1        
 263   1        OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 264   1        OLED_WR_Byte(0x80,OLED_CMD);//
 265   1        
 266   1        OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 267   1        OLED_WR_Byte(0x05,OLED_CMD);//
 268   1        
 269   1        OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 270   1        OLED_WR_Byte(0xF1,OLED_CMD);//
 271   1        
 272   1        OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 273   1        OLED_WR_Byte(0x12,OLED_CMD);//
 274   1        
 275   1        OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 276   1        OLED_WR_Byte(0x30,OLED_CMD);//
 277   1        
 278   1        OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 279   1        OLED_WR_Byte(0x14,OLED_CMD);//
 280   1        
 281   1        OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 282   1      }  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1058    ----
   CONSTANT SIZE    =   2360    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      29
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
